stackedpred
source('~/R/TEST.R')
accuracies
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
names(getModelInfo())
getModelInfo()
getModelInfo("lasso")
?plot.enet
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
lassomod
?plot.enet
plot.enet(lassomod)
str(lassomod)
?plot.enet
plot(lassomod, data=training)
plot.enet(lassomod, data=training)
plot.enet(lassomod, xvar="penalty", use.color=T)
plot.enet(lassomod$finalmodel, xvar="penalty", use.color=T)
plot.enet(lassomod$finalModel, xvar="penalty", use.color=T)
lassomod$finalModel
install.packages("forecast")
library(forecast)
?bats
source('~/R/TEST.R')
source('~/R/TEST.R')
?ts
?forecast
source('~/R/TEST.R')
tstest = ts(testing$visitsTumblr)
forecast = forecast(bats, tstest)
forecast = forecast(bats, newdata=tstest)
forecast
tstest
testing
nrow(tstest)
str(tstest)
length(tstest)
length(forecasr)
length(forecast)
length(tstrain)
training$visitsTumblr
tstrain
tstest
training
forecast = forecast(bats, newdata=testing)
forecast
testing
forecast = forecast(bats, newdata=testing, h=nrow(testing))
forecast
forecast = forecast(bats, newdata=testing, h=nrow(testing))$Forecast
forecast
forecast = forecast(bats, newdata=testing, h=nrow(testing))
forecast
ls(forecast)
names(forecast)
forcast$x
forecast$x
forecast$model
forecast$fitted
forecast
?ets
forecast = forecast(bats, newdata=testing)
forecast
forecast = forecast(bats, newdata=testing, h=nrow(testing))
forecast$"Point Forecast"
str(forecast)
forecast$mean
testign
testing
testing$VisitsTumblr
testing$visitsTumblr
names(forecast)
forecast$mean
forecast$upper
forecast$upper[,2]
testing$visitsTumblr < forecast$upper[,2]
forecast$lower
testing$visitsTumblr < forecast$upper[,2] & testing$visitsTumblr > forecast$lower[,2]
sum(testing$visitsTumblr < forecast$upper[,2] & testing$visitsTumblr > forecast$lower[,2])
sum(testing$visitsTumblr < forecast$upper[,2] & testing$visitsTumblr > forecast$lower[,2]) / length(testing$visitsTumblr)
library("e1071", lib.loc="~/R/win-library/3.1")
detach("package:e1071", unload=TRUE)
library("e1071", lib.loc="~/R/win-library/3.1")
source('~/R/TEST.R')
help(e1071)
help("e1071")
??e1071
?svm
source('~/R/TEST.R')
set.seed(325)
svm = svm(CompressiveStrength ~ ., data=training)
predictions = predict(svm, newdata=testing)
prediction
predictions
?rmse
class(predictions)
testing
testing$CompressiveStrength
testing$CompressiveStrength - predictions
mean((testing$CompressiveStrength - predictions) ^ 2)
sqrt(mean((testing$CompressiveStrength - predictions) ^ 2))
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
source('~/R/TEST.R')
accuracies
stacked[red]
stackedpred
testing$diagnosis
source('~/R/TEST.R')
source('~/R/TEST.R')
warnings()
testing$diagnosis
testing$diagnosis * 1
as.integer(testing$diagnosis)
source('~/R/TEST.R')
accuracy(predrf)
predrf
predrf == testing$diagnosis
sum(predrf == testing$diagnosis)
source('~/R/TEST.R')
accuracies
predrf
predrf == testing$diagnosis
sum(predrf == testing$diagnosis)
sum(predrf == testing$diagnosis) / length(testing$diagnosis)
source('~/R/TEST.R')
createDataPartition(training$diagnosis, p = 3/4)[[1]]
source('~/R/TEST.R')
source('~/R/TEST.R')
exists("rf")
exists("rf", inherits=F)
!exists("rf", inherits=F)
source('~/R/TEST.R')
warnings()
predrf
checking$diagnosis
accuracies
training$diagnosis
checking$diagnosis
testing$diagnosis
createDataPartition(adData$diagnosis, p = 3/4)[[1]]
createDataPartition(adData$diagnosis, p = 3/4)
createDataPartition(training$diagnosis, p = 3/4)[[1]]
createDataPartition(training$diagnosis, p = 3/4)
names(prediction   predrf = predict(rf, newdata=testing)
predgbm = predict(gbm, newdata=testing)
predlda = predict(lda, newdata=testing)
stackedpred = predict(stackedmod, newdata=testing))
predrf = predict(rf, newdata=testing)
predgbm = predict(gbm, newdata=testing)
predlda = predict(lda, newdata=testing)
stackedpred = predict(stackedmod, newdata=testing)
predictions = data.frame(predrf, predgbm, predlda, stackedpred)
accuracy = function(x, answers=testing$diagnosis) {
sum(x == answers) / length(answers)
}
accuracies = with(predictions, c(rf=accuracy(predrf), gbm=accuracy(predgbm), lda=accuracy(predlda),
stacked=accuracy(stackedpred)))
accuracies
source('~/Git/Kaggle_Titanic/titanic.R')
setwd("C:\\Users\\K-Dawg\\Documents\\Git\\Kaggle_Titanic")
source('~/Git/Kaggle_Titanic/titanic.R')
summary(training)
training[training$Embarked == "",]
plot(Fare ~ PassengerId, col=Survived, type="p")
plot(Fare ~ PassengerId, col=Survived, type="p", data=training)
plot(Fare ~ PassengerId, col=c("red", "green", "blue")[Survived], type="p", data=training)
plot(Fare ^ 2 ~ PassengerId, col=c("red", "green", "blue")[Survived], type="p", data=training)
plot(Fare * 2 ~ PassengerId, col=c("red", "green", "blue")[Survived], type="p", data=training)
plot(Fare ~ PassengerId, col=c("red", "green")[Survived], type="p", data=training)
plot(Fare ~ Pclass, col=c("red", "green")[Survived], type="p", data=training)
plot(Pclass ~ PassengerId, col=c("red", "green")[Survived], type="p", data=training)
plot(Pclass ~ PassengerId, col=c("red", "green")[Survived], data=training)
boxplot(Pclass ~ PassengerId, col=c("red", "green")[Survived], data=training)
plot(Fare ~ Pclass, col=c("red", "green")[Survived], type="p", data=training)
plot(Fare ~ PassengerId, col=c("red", "green")[Survived], type="p", data=training)
tapply(training$Fare, Survived, mean)
tapply(training$Fare, "Survived", mean)
tapply(training$Fare, training$Survived, mean)
sapply(tapply(training$Fare, training$Survived, mean), abline)
sapply(levels(training$Survived), abline, h=tapply(training$Fare, training$Survived, mean))
tapply(training$Fare, training$Survived, mean)
abline(h=tapply(training$Fare, training$Survived, mean))
abline(h=tapply(training$Fare, training$Survived, mean), col=c("red", "green"))
aic = step(glm(Survived ~ .))
aic = step(glm(Survived ~ ., data=training))
aic = step(glm(Survived ~ Pclass, data=training))
aic = step(glm(Survived ~ as.factor(Pclass), data=training))
training$Survived
as.integer(training$Survived)
as.integer(training$Survived) - 1
as.factor(training$Survived)
factor(training$Survived, c(0,1))
factor(training$Survived, c("0","1"))
as.factor(training$Survived)
as.numeric(training$Survived)
source('~/Git/Kaggle_Titanic/titanic.R')
training$Survived
as.factor(training$Survived)
attach(mtcars)
sapply(mtcars, class)
cyl
as.factor(cyl)
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
training$Sex
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
training$Sex
as.integer(training$Sex)
as.integer(training$Sex) - 1
as.factor(as.integer(training$Sex) - 1)
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
training$Survived
integer(training$Survived)
as.integer(training$Survived)
training$Survived = factor(training$Survived, levels=c("N", "Y"))
training$Survived
as.integer(training$Survived)
training$Survived = factor(as.integer(training$Survived) - 1, levels=c("N", "Y"))
training$Survived
source('~/Git/Kaggle_Titanic/titanic.R')
training$Survived
as.integer(training$Survived)
as.integer(training$Survived) - 1
as.factor(as.integer(training$Survived) - 1)
factor(as.integer(training$Survived) - 1)
factor(as.integer(training$Survived) - 1, levels=c("N", "Y"))
factor(as.integer(training$Survived) - 1)
factor(as.integer(training$Survived) - 1, labels=c("N", "Y"))
source('~/Git/Kaggle_Titanic/titanic.R')
training$Survived
as.integer(training$Survived)
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
glm(Survived ~ Pclass, data=training)
glm(Survived ~ as.factor(Pclass), data=training)
glm(Survived ~ Pclass, data=training)
glm(as.factor(Survived) ~ as.factor(Pclass), data=training)
training$Survived
training$Survived * 1
as.integer(training$Survived)
as.integer(training$Survived) - 1
glm(as.integer(training$Survived) - 1 ~ Pclass, data=training)
glm(as.integer(training$Survived) - 1 ~ as.factor(Pclass), data=training)
source('~/Git/Kaggle_Titanic/titanic.R')
rm(training)
source('~/Git/Kaggle_Titanic/titanic.R')
levels(training$Sex) = c("F", "M")
class(training$Name) = "character"
training$Name = as.character(training$Name)
rm(training)
source('~/Git/Kaggle_Titanic/titanic.R')
complete.cases(training)
training[complete.cases(training) == F,]
nrow(training[complete.cases(training) == F,])
source('~/Git/Kaggle_Titanic/titanic.R')
rm(training)
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
training$Sex
glm(as.integer(training$Survived) - 1 ~ Pclass + Sex, data=training)
step(glm(as.integer(training$Survived) - 1 ~ Pclass + Sex, data=training))
rm(training)
source('~/Git/Kaggle_Titanic/titanic.R')
step(glm(as.integer(training$Survived) - 1 ~ Pclass + Sex, data=training))
step(glm(as.integer(training$Survived) - 1 ~ Pclass + Sex + Age + SibSp, data=training))
step(glm(as.integer(training$Survived) - 1 ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=training))
step(glm(as.integer(training$Survived) - 1 ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=training), direction="both")
step(glm(as.integer(training$Survived) - 1 ~ Fare + Embarked + Pclass + Sex + Age + SibSp + Parch, data=training), direction="both")
?glm
step(glm(as.integer(training$Survived) - 1 ~ Fare + Embarked + Pclass + Sex + Age + SibSp + Parch, data=training, family="binomial"), direction="both")
step(glm(training$Survived ~ Fare + Embarked + Pclass + Sex + Age + SibSp + Parch, data=training, family="binomial"), direction="both")
pairs(training)
pairs(Survived, Pclass, as.integer(Sex), Age, SibSp, Parch, Fare, data=training)
with(training, pairs(Survived, Pclass, as.integer(Sex), Age, SibSp, Parch, Fare, data=training))
as.integer(training$Sex)
with(training, pairs(Survived, Pclass, Age, SibSp, Parch, Fare, data=training))
with(training, pairs(Survived, Pclass, Age, SibSp, Parch, Fare))
source('~/Git/Kaggle_Titanic/titanic.R')
Pclass
rm(training)
source('~/Git/Kaggle_Titanic/titanic.R')
Sex
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
pairs(Survived, Pclass, Age)
pairs(training)
pairs(training[,-Name])
subset(training, subset=c("Survived, Pclass"))
subset(training, select=c("Survived, Pclass"))
subset(training, select=c(Sex, Pclass))
pairs(subset(training, select=c(Sex, Pclass)))
pairs(subset(training, select=c(Survived, Sex, Pclass)))
pairs(subset(training, select=c(Survived, Sex, Pclassm, Age)))
pairs(subset(training, select=c(Survived, Sex, Pclass, Age)))
pairs(subset(training, select=c(Survived, Sex, Pclass, Age, SibSp, Parch)))
step(glm(training$Survived ~ Fare + Embarked + Pclass + Sex + Age + SibSp + Parch, data=training, family="binomial"), direction="both")
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
ls(aic)
aic$anova
?anov
?ano
?anova
aic$boundary
aic$coefficients
summary(aic)
dfbetas(aic)
summary(dfbetas(aic))
training = training[!is.na(Age),]
print(training[complete.cases(training) == F,])
rm(training)
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
rm(training)
source('~/Git/Kaggle_Titanic/titanic.R')
complete.cases(training)
rm(list=ls())
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
plot(aic)
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
indexMissingNA
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
nrow(Embarked)
nrow(training$Embarked)
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
?trainControl
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
errors.df
fitTREE
fitTREE$results
?train
fitTREE$bestTune
fitTREE$control
fitRF$control
fitRF$results
fitGBM$results
confM.RF
confM.GBM
declare
Survived
testing = read.csv("data/train.csv", header=T,
colClasses=c("integer", "factor", "factor", "character",
"factor", "numeric", "integer", "integer",
"character", "numeric", "character", "factor"))
testing = read.csv("data/test.csv", header=T,
colClasses=c("integer", "factor", "factor", "character",
"factor", "numeric", "integer", "integer",
"character", "numeric", "character", "factor"))
testing = read.csv("data/test.csv", header=T)
rm(testing)
source('~/Git/Kaggle_Titanic/titanic.R')
predictedValuesTREE
length(predictedValuesTREE)
length(validation$Survived)
source('~/Git/Kaggle_Titanic/titanic.R')
summary(aic)
source('~/Git/Kaggle_Titanic/titanic.R')
modelPredictions = data.frame(predictedValuesTREE, predictedValuesRF, predictedValuesGBM, predictedValuesSVM, validation$Survived)
modelPredictions
modelPredictions = data.frame(tree=predictedValuesTREE, rf=predictedValuesRF, gbm=predictedValuesGBM, svm=predictedValuesSVM, Survived=validation$Survived)
modelPredictions
source('~/Git/Kaggle_Titanic/titanic.R')
source('~/Git/Kaggle_Titanic/titanic.R')
warnings()
summary(stackedModel)
ls(stackedModel)
stackedModel$results
predict(stackedModel, modelPredictions)
stackedPreds = predict(stackedModel, modelPreds)
modelPreds = data.frame(tree=predictedValuesTREE, rf=predictedValuesRF, gbm=predictedValuesGBM, svm=predictedValuesSVM, Survived=validation$Survived)
rm(modelPredictions)
stackedPreds = predict(stackedModel, modelPreds)
stackedPreds
stackedPreds == modelPreds$Survived
(stackedPreds == modelPreds$Survived) * 1
(stackedPreds == modelPreds$Survived) * 1 / length(stackedPreds)
sum((stackedPreds == modelPreds$Survived) * 1) / length(stackedPreds)
tree = predict(fitTREE, testing)
tree = predict(fitTREE, testing)
rf = predict(fitRF, testing)
gbm = predict(fitGBM, testing)
svm = predict(fitSVM, testing)
testPreds = data.frame(tree, rf, gbm, svm)
combinedPreds = predict(stackedModel, testPreds)
combinedPreds
combinedPreds == testing$Survived
combinedPreds == testing$Survived * 1
(combinedPreds == testing$Survived) * 1
sum((combinedPreds == testing$Survived) * 1)
sum((combinedPreds == testing$Survived) * 1) / length(combinedPreds)
sum((tree == testing$Survived) * 1) / length(testing$Survived)
sum((rf == testing$Survived) * 1) / length(testing$Survived)
sum((gbm == testing$Survived) * 1) / length(testing$Survived)
sum((svm == testing$Survived) * 1) / length(testing$Survived)
source('~/Git/Kaggle_Titanic/titanic.R')
sum((combinedPreds == testing$Survived) * 1) / length(combinedPreds)
cat(sprintf("Final prediction accuracy: %d\n", sum(combinedPreds == testing$Survived) / length(testing$Survived)))
cat(sprintf("Final prediction accuracy: %f\n", sum(combinedPreds == testing$Survived) / length(testing$Survived)))
cat(sprintf("Final prediction accuracy: %f%\n", sum(combinedPreds == testing$Survived) / length(testing$Survived)))
cat(sprintf("Final prediction accuracy: %f%%\n", sum(combinedPreds == testing$Survived) / length(testing$Survived)))
cat(sprintf("Final prediction accuracy: %3f%\n", sum(combinedPreds == testing$Survived) / length(testing$Survived) * 100))
cat(sprintf("Final prediction accuracy: %3f%%\n", sum(combinedPreds == testing$Survived) / length(testing$Survived) * 100))
cat(sprintf("Final prediction accuracy: %1f%%\n", sum(combinedPreds == testing$Survived) / length(testing$Survived) * 100))
cat(sprintf("Final prediction accuracy: %cat(sprintf("Final prediction accuracy: %.01f%\n", sum(combinedPreds == testing$Survived) / length(testing$Survived) * 100))f%%\n", sum(combinedPreds == testing$Survived) / length(testing$Survived) * 100))
cat(sprintf("Final prediction accuracy: %.01f%%\n", sum(combinedPreds == testing$Survived) / length(testing$Survived) * 100))
source('~/Git/Kaggle_Titanic/titanic.R')
?metho
?method
?train
names(getModelInfo())
stackedModel = train(Survived ~ ., method="gam", data=modelPreds)
# Predict on validation set.
stackedPreds = predict(stackedModel, modelPreds)
# Predict on test set.
tree = predict(fitTREE, testing)
rf = predict(fitRF, testing)
gbm = predict(fitGBM, testing)
svm = predict(fitSVM, testing)
testPreds = data.frame(tree, rf, gbm, svm)
combinedPreds = predict(stackedModel, testPreds)
# Print accuracy.
cat(sprintf("Real out-of-sample prediction accuracy: %.01f%%\n", sum(combinedPreds == testing$Survived) / length(testing$Survived) * 100))
stackedModel = train(Survived ~ ., method="rf", data=modelPreds)
# Predict on validation set.
stackedPreds = predict(stackedModel, modelPreds)
# Predict on test set.
tree = predict(fitTREE, testing)
rf = predict(fitRF, testing)
gbm = predict(fitGBM, testing)
svm = predict(fitSVM, testing)
testPreds = data.frame(tree, rf, gbm, svm)
combinedPreds = predict(stackedModel, testPreds)
# Print accuracy.
cat(sprintf("Real out-of-sample prediction accuracy: %.01f%%\n", sum(combinedPreds == testing$Survived) / length(testing$Survived) * 100))
stackedModel = train(Survived ~ ., method="gbm", data=modelPreds)
# Predict on validation set.
stackedPreds = predict(stackedModel, modelPreds)
# Predict on test set.
tree = predict(fitTREE, testing)
rf = predict(fitRF, testing)
gbm = predict(fitGBM, testing)
svm = predict(fitSVM, testing)
testPreds = data.frame(tree, rf, gbm, svm)
combinedPreds = predict(stackedModel, testPreds)
# Print accuracy.
cat(sprintf("Real out-of-sample prediction accuracy: %.01f%%\n", sum(combinedPreds == testing$Survived) / length(testing$Survived) * 100))
source('~/Git/Kaggle_Titanic/titanic.R')
sum(tree == testing$Survived) / length(testing$Survived) * 100)
sum(tree == testing$Survived) / length(testing$Survived) * 100
sum(rf == testing$Survived) / length(testing$Survived) * 100
sum(gbm == testing$Survived) / length(testing$Survived) * 100
sum(svm == testing$Survived) / length(testing$Survived) * 100
source('~/Git/Kaggle_Titanic/titanic.R')
?omit.na
source('~/Git/Kaggle_Titanic/titanic.R')
