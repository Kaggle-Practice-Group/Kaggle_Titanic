data <- read.csv("data/train.csv", header=T,
colClasses=c("integer", "factor", "factor", "character",
"factor", "numeric", "integer", "integer",
"character", "numeric", "character", "factor"))
## Set common seed for all team members for reproducibility purposes
set.seed(3846)
library('caret')
library('plyr')
###
# Pre-processing
###
levels(data$Survived) = c("N", "Y")
levels(data$Sex) = c("F", "M")
data[data == ''] <- NA
nmissing <- function(x) sum(is.na(x))
missingNA <- colwise(nmissing)(data)
indexMissingNA <- missingNA >= dim(data)[1]/2
new.data <- data[, !indexMissingNA]
new.data <- new.data[, c(-4, -9, -11)]
indexSample <- createDataPartition(y=new.data$Survived, p=.9, list=FALSE)
training <- new.data[indexSample,]
validation <- new.data[-indexSample,]
validation <- na.omit(validation)
library('doMC')
registerDoMC(cores = 2) # set number of CPU cores
library('randomForest')
fitTREE <- train(Survived ~ ., data=training, method='rpart', preProcess=c("center", "scale"))
fitControlRF <- trainControl(method = "cv", number = 5)
fitRF <- train(Survived ~ ., data=training, method='rf', preProcess=c("center", "scale"),
trControl = fitControlRF, prox=TRUE, verbose = FALSE)
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 20)
fitGBM <- train(Survived ~ ., data = training, method = 'gbm', trControl = fitControl,
verbose = FALSE)
fitControlRF <- trainControl(method = "cv", number = 10)
fitRF <- train(Survived ~ ., data=training, method='rf', preProcess=c("center", "scale"),
trControl = fitControlRF, prox=TRUE, verbose = FALSE)
fitSVM <- train(Survived ~., data=training, method = 'svmLinear', trControl = fitControl)
method <- c('trees', 'RF', 'GBM', 'SVM')
inSample.Accuracy <- c(max(fitTREE$results[,2]),
max(fitRF$results[,2]),
max(fitGBM$results[,4]),
max(fitSVM$results[,2])
)
inSample.Error <- c(1 - max(fitTREE$results[,2]),
1 - max(fitRF$results[,2]),
1 - max(fitGBM$results[,4]),
1 - max(fitSVM$results[,2])
)
# TREE prediction on validation set
predictedValuesTREE <- predict(fitTREE, validation)
confM.TREE <- confusionMatrix(validation$Survived, predictedValuesTREE)
# RF prediction on validation set
predictedValuesRF <- predict(fitRF, validation)
confM.RF <- confusionMatrix(validation$Survived, predictedValuesRF)
# GBM prediction on validation set
predictedValuesGBM <- predict(fitGBM, validation)
confM.GBM <- confusionMatrix(validation$Survived, predictedValuesGBM)
# SVM prediction on validation set
predictedValuesSVM <- predict(fitSVM, validation)
confM.SVM <- confusionMatrix(validation$Survived, predictedValuesSVM)
outSample.Accuracy <- c(as.numeric(confM.TREE$overall[1]),
as.numeric(confM.RF$overall[1]),
as.numeric(confM.GBM$overall[1]),
as.numeric(confM.SVM$overall[1])
)
outSample.Error <- c(1 - as.numeric(confM.TREE$overall[1]),
1 - as.numeric(confM.RF$overall[1]),
1 - as.numeric(confM.GBM$overall[1]),
1 - as.numeric(confM.SVM$overall[1])
)
errors.df <- data.frame(method = method,
inSample.Acc = inSample.Accuracy,
inSample.Err = inSample.Error,
outSample.Acc = outSample.Accuracy,
outSample.Err = outSample.Error,
stringsAsFactors=FALSE)
errors.df
declare <- NULL
declare <- rbind(declare, paste('Highest in-sample accuracy: ',
round(as.vector(errors.df[which.max(errors.df$inSample.Acc), 2]), 4)
*100, '% with method ', as.vector(errors.df[which.max(errors.df$inSample.Acc), 1]),
'.\n', sep=''))
declare <- rbind(declare, paste('Highest out-sample accuracy: ',
round(as.vector(errors.df[which.max(errors.df$outSample.Acc), 4]), 4)
*100, '% with method ', as.vector(errors.df[which.max(errors.df$outSample.Acc), 1]),
'.', sep=''))
cat(declare)
fitControlRF <- trainControl(method = "cv", number = 20)
fitRF <- train(Survived ~ ., data=training, method='rf', preProcess=c("center", "scale"),
trControl = fitControlRF, prox=TRUE, verbose = FALSE)
# 3- GBM
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 30)
fitGBM <- train(Survived ~ ., data = training, method = 'gbm', trControl = fitControl,
verbose = FALSE)
inSample.Accuracy <- c(max(fitTREE$results[,2]),
max(fitRF$results[,2]),
max(fitGBM$results[,4]),
max(fitSVM$results[,2])
)
inSample.Error <- c(1 - max(fitTREE$results[,2]),
1 - max(fitRF$results[,2]),
1 - max(fitGBM$results[,4]),
1 - max(fitSVM$results[,2])
)
# TREE prediction on validation set
predictedValuesTREE <- predict(fitTREE, validation)
confM.TREE <- confusionMatrix(validation$Survived, predictedValuesTREE)
# RF prediction on validation set
predictedValuesRF <- predict(fitRF, validation)
confM.RF <- confusionMatrix(validation$Survived, predictedValuesRF)
# GBM prediction on validation set
predictedValuesGBM <- predict(fitGBM, validation)
confM.GBM <- confusionMatrix(validation$Survived, predictedValuesGBM)
# SVM prediction on validation set
predictedValuesSVM <- predict(fitSVM, validation)
confM.SVM <- confusionMatrix(validation$Survived, predictedValuesSVM)
outSample.Accuracy <- c(as.numeric(confM.TREE$overall[1]),
as.numeric(confM.RF$overall[1]),
as.numeric(confM.GBM$overall[1]),
as.numeric(confM.SVM$overall[1])
)
outSample.Error <- c(1 - as.numeric(confM.TREE$overall[1]),
1 - as.numeric(confM.RF$overall[1]),
1 - as.numeric(confM.GBM$overall[1]),
1 - as.numeric(confM.SVM$overall[1])
)
errors.df <- data.frame(method = method,
inSample.Acc = inSample.Accuracy,
inSample.Err = inSample.Error,
outSample.Acc = outSample.Accuracy,
outSample.Err = outSample.Error,
stringsAsFactors=FALSE)
errors.df
fitControlRF <- trainControl(method = "cv", number = 15)
fitRF <- train(Survived ~ ., data=training, method='rf', preProcess=c("center", "scale"),
trControl = fitControlRF, prox=TRUE, verbose = FALSE)
# 3- GBM
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 20)
fitGBM <- train(Survived ~ ., data = training, method = 'gbm', trControl = fitControl,
verbose = FALSE)
# in-sample error
inSample.Accuracy <- c(max(fitTREE$results[,2]),
max(fitRF$results[,2]),
max(fitGBM$results[,4]),
max(fitSVM$results[,2])
)
inSample.Error <- c(1 - max(fitTREE$results[,2]),
1 - max(fitRF$results[,2]),
1 - max(fitGBM$results[,4]),
1 - max(fitSVM$results[,2])
)
# TREE prediction on validation set
predictedValuesTREE <- predict(fitTREE, validation)
confM.TREE <- confusionMatrix(validation$Survived, predictedValuesTREE)
# RF prediction on validation set
predictedValuesRF <- predict(fitRF, validation)
confM.RF <- confusionMatrix(validation$Survived, predictedValuesRF)
# GBM prediction on validation set
predictedValuesGBM <- predict(fitGBM, validation)
confM.GBM <- confusionMatrix(validation$Survived, predictedValuesGBM)
# SVM prediction on validation set
predictedValuesSVM <- predict(fitSVM, validation)
confM.SVM <- confusionMatrix(validation$Survived, predictedValuesSVM)
outSample.Accuracy <- c(as.numeric(confM.TREE$overall[1]),
as.numeric(confM.RF$overall[1]),
as.numeric(confM.GBM$overall[1]),
as.numeric(confM.SVM$overall[1])
)
outSample.Error <- c(1 - as.numeric(confM.TREE$overall[1]),
1 - as.numeric(confM.RF$overall[1]),
1 - as.numeric(confM.GBM$overall[1]),
1 - as.numeric(confM.SVM$overall[1])
)
errors.df <- data.frame(method = method,
inSample.Acc = inSample.Accuracy,
inSample.Err = inSample.Error,
outSample.Acc = outSample.Accuracy,
outSample.Err = outSample.Error,
stringsAsFactors=FALSE)
errors.df
declare <- NULL
declare <- rbind(declare, paste('Highest in-sample accuracy: ',
round(as.vector(errors.df[which.max(errors.df$inSample.Acc), 2]), 4)
*100, '% with method ', as.vector(errors.df[which.max(errors.df$inSample.Acc), 1]),
'.\n', sep=''))
declare <- rbind(declare, paste('Highest out-sample accuracy: ',
round(as.vector(errors.df[which.max(errors.df$outSample.Acc), 4]), 4)
*100, '% with method ', as.vector(errors.df[which.max(errors.df$outSample.Acc), 1]),
'.', sep=''))
cat(declare)
test <- read.csv("data/test.csv", header=T,
colClasses=c("integer", "factor", "character", 'factor',
'numeric', 'integer', 'integer', 'character',
'numeric', 'character', 'factor'))
test <- test[, c(-3, -8, -10)]
levels(test$Survived) = c("N", "Y")
levels(test$Sex) = c("F", "M")
predictedTEST <- predict(fitRF, test)
predictedTEST
